{"ast":null,"code":"const APIURL = '/api/todos/';\nexport async function getTodos() {\n  return fetch(APIURL).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then(data => {\n          let err = {\n            errMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errMessage: 'Please try again later, server is not responding'\n        };\n        throw err;\n      }\n    }\n\n    return resp.json();\n  });\n}\nexport async function createTodo(val) {\n  return fetch(APIURL, {\n    method: 'post',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      name: val\n    })\n  }).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then(data => {\n          let err = {\n            errMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errMessage: 'Please try again later, server is not responding'\n        };\n        throw err;\n      }\n    }\n\n    return resp.json();\n  });\n}\nexport async function removeTodo(id) {\n  const deleteURL = APIURL + id;\n  return fetch(deleteURL, {\n    method: 'delete'\n  }).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then(data => {\n          let err = {\n            errMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errMessage: 'Please try again later, server is not responding'\n        };\n        throw err;\n      }\n    }\n\n    return resp.json();\n  });\n}\nexport async function updateTodo(todo) {\n  const toggleURL = APIURL + todo._id;\n  return fetch(toggleURL, {\n    method: 'put',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      completed: !todo.completed\n    })\n  }).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then(data => {\n          let err = {\n            errMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errMessage: 'Please try again later, server is not responding'\n        };\n        throw err;\n      }\n    }\n\n    return resp.json();\n  });\n}","map":{"version":3,"sources":["/home/jeevesh/My Files/Study/Web Development/React/fullstack_todo_app/todos_frontend/src/api.js"],"names":["APIURL","getTodos","fetch","then","resp","ok","status","json","data","err","errMessage","message","createTodo","val","method","headers","Headers","body","JSON","stringify","name","removeTodo","id","deleteURL","updateTodo","todo","toggleURL","_id","completed"],"mappings":"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","sourcesContent":["const APIURL = '/api/todos/';\n\n\nexport async function getTodos() {\n  return fetch(APIURL).then((resp) => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then((data) => {\n          let err = {\n            errMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errMessage: 'Please try again later, server is not responding'\n        };\n        throw err;\n      }\n    }\n    return resp.json()\n  });\n}\n\nexport async function createTodo(val) {\n  return fetch(APIURL, {\n    method: 'post',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      name: val\n    })\n  }).then((resp) => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then((data) => {\n          let err = {\n            errMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errMessage: 'Please try again later, server is not responding'\n        };\n        throw err;\n      }\n    }\n    return resp.json()\n  });\n}\n\nexport async function removeTodo(id) {\n  const deleteURL = APIURL + id;\n  return fetch(deleteURL, {\n    method: 'delete'\n  }).then((resp) => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then((data) => {\n          let err = {\n            errMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errMessage: 'Please try again later, server is not responding'\n        };\n        throw err;\n      }\n    }\n    return resp.json();\n  });\n}\n\n\nexport async function updateTodo(todo) {\n  const toggleURL = APIURL + todo._id;\n  return fetch(toggleURL, {\n    method: 'put',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      completed: !todo.completed\n    })\n  }).then((resp) => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then((data) => {\n          let err = {\n            errMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errMessage: 'Please try again later, server is not responding'\n        };\n        throw err;\n      }\n\n    }\n    return resp.json();\n\n  });\n}"]},"metadata":{},"sourceType":"module"}